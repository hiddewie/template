// WHITESPACE = _{ " " | NEWLINE }
whitespace = _{ " " | NEWLINE }
start_marker = _{ "{%" }
end_marker = _{ "%}" }
comment_start_marker = _{ "{#" }
comment_end_marker = _{ "#}" }
keyword_if = _{ "if" }
keyword_elif = _{ "elif" }
keyword_else = _{ "else" }
keyword_end = _{ "end" }
keyword_for = _{ "for" }
keywords = _{
    keyword_if |
    keyword_elif |
    keyword_else |
    keyword_end |
    keyword_for
}
property = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" | "-")* }
properties = { property ~ ("." ~ property)* }
function = {
    "lowerCase" |
    "upperCase" |
    "kebabCase" |
    "camelCase" |
    "snakeCase" |
    "pascalCase" |
    "length" |
    "capitalizeWords" |
    "capitalize" |
    "environment" |
    "default" |
    "reverse" |
    "split"
}
boolean = { "true" | "false" }
floating_point_number = { "-"? ~ ((ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+) | (ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT*)) ~ (("e" | "E") ~ "-"? ~ ASCII_DIGIT+)? }
integer_number = { "-"? ~ ASCII_DIGIT+ }
number = { floating_point_number | integer_number }
string = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
null = { "null" }
array = { "[" ~ whitespace* ~ (expression ~ whitespace* ~ ("," ~ whitespace* ~ expression)* ~ whitespace* ~ ","?)? ~ whitespace* ~ "]" }
key_value_pair = { (property | string) ~ whitespace* ~ ":" ~ whitespace* ~ expression }
dictionary = { "{" ~ whitespace* ~ (key_value_pair ~ whitespace* ~ ("," ~ whitespace* ~ key_value_pair)* ~ whitespace* ~ ","?)? ~ whitespace* ~ "}" }
literal = { boolean | number | string | null | array | dictionary }
function_call = { function ~ whitespace* ~ ("(" ~ whitespace* ~ expression ~ whitespace* ~ ")")? }
expression = { !keywords ~ (literal | properties) ~ whitespace* ~ ("|" ~ whitespace* ~ function_call)* }
expression_template = { start_marker ~ whitespace* ~ expression ~ whitespace* ~ end_marker }
if_template = { start_marker ~ whitespace* ~ keyword_if ~ whitespace+ ~ expression ~ whitespace* ~ end_marker }
elif_template = { start_marker ~ whitespace* ~ keyword_elif ~ whitespace+ ~ expression ~ whitespace* ~ end_marker }
else_template = { start_marker ~ whitespace* ~ keyword_else ~ whitespace* ~ end_marker }
end_template = { start_marker ~ whitespace* ~ keyword_end ~ whitespace* ~ end_marker }
if_elif_else_template = { if_template ~ sub_template ~ elif_template* ~ sub_template ~ else_template? ~ sub_template  ~ end_template }
for_template = { start_marker ~ whitespace* ~ keyword_for ~ whitespace+ ~ property ~ whitespace+ ~ "in" ~ whitespace+ ~ expression ~ whitespace* ~ end_marker }
for_else_template = { for_template ~ sub_template ~ else_template? ~ sub_template ~ end_template }
comment = { comment_start_marker ~ (!comment_end_marker ~ ANY)+ ~ comment_end_marker }
template = { comment | if_elif_else_template | for_else_template | expression_template }
character = @{ !start_marker ~ ANY }

sub_template = _{ (template | character)* }
file = { SOI ~ sub_template ~ EOI }
